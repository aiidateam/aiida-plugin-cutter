[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
# See https://www.python.org/dev/peps/pep-0621/
name = "{{cookiecutter.plugin_name}}"
dynamic = ["version"]  # read from {{cookiecutter.module_name}}/src/__init__.py
description = "{{cookiecutter.short_description}}"
{%- if cookiecutter.contact_email %}
authors = [{name = "{{cookiecutter.author}}", email = "{{cookiecutter.contact_email}}"}]
{% else %}
authors = [{name = "{{cookiecutter.author}}"}]
{% endif -%}
readme = "README.md"
license = {file = "LICENSE"}
classifiers = [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Development Status :: 3 - Alpha",
    "Framework :: AiiDA"
]
keywords = ["aiida", "plugin"]
requires-python = ">=3.9"
dependencies = [
    "aiida-core>={{cookiecutter.aiida_min_version}},<3",
    "voluptuous"
]

[project.optional-dependencies]
pre-commit = [
  'pre-commit~=3.5',
]
docs = [
    "sphinx",
    "sphinxcontrib-contentui",
    "sphinxcontrib-details-directive",
    "furo",
    "markupsafe<2.1"
]

[project.urls]
Source = "https://github.com/{{cookiecutter.github_user}}/{{cookiecutter.repo_name}}"

[project.entry-points."aiida.data"]
"{{cookiecutter.entry_point_prefix}}" = "{{cookiecutter.module_name}}.data:DiffParameters"

[project.entry-points."aiida.calculations"]
"{{cookiecutter.entry_point_prefix}}" = "{{cookiecutter.module_name}}.calculations:DiffCalculation"

[project.entry-points."aiida.parsers"]
"{{cookiecutter.entry_point_prefix}}" = "{{cookiecutter.module_name}}.parsers:DiffParser"

[project.entry-points."aiida.cmdline.data"]
"{{cookiecutter.entry_point_prefix}}" = "{{cookiecutter.module_name}}.cli:data_cli"

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py example_*.py"
addopts = "--pdbcls=IPython.terminal.debugger:TerminalPdb"
filterwarnings = [
    "ignore::DeprecationWarning:aiida:",
    "ignore:Creating AiiDA configuration folder:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:yaml:",
]


[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source = ["src/{{cookiecutter.module_name}}"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
ignore = [
  'F403',  # Star imports unable to detect undefined names
  'F405',  # Import may be undefined or defined from star imports
  'PLR0911',  # Too many return statements
  'PLR0912',  # Too many branches
  'PLR0913',  # Too many arguments in function definition
  'PLR0915',  # Too many statements
  'PLR2004',  # Magic value used in comparison
  'RUF005',  # Consider iterable unpacking instead of concatenation
  'RUF012'  # Mutable class attributes should be annotated with `typing.ClassVar`
]
select = [
  'E',  # pydocstyle
  'W',  # pydocstyle
  'F',  # pyflakes
  'I',  # isort
  'N',  # pep8-naming
  'PLC',  # pylint-convention
  'PLE',  # pylint-error
  'PLR',  # pylint-refactor
  'PLW',  # pylint-warning
  'RUF'  # ruff
]

## Hatch configurations

[tool.hatch.version]
path = "src/{{cookiecutter.module_name}}/__init__.py"

[tool.hatch.envs.hatch-test]
dependencies = [
    'pgtest~=1.3,>=1.3.1',
    'coverage~=7.0',
    'pytest~=7.0',
    "pytest-cov~=4.1",
    "ipdb"
]

[tool.hatch.envs.hatch-test.scripts]
# These are the efault scripts provided by hatch.
# The have been copied to make the execution more transparent

# This command is run with the command `hatch test`
run = "pytest{env:HATCH_TEST_ARGS:} {args}"
# The three commands below are run with the command `hatch test --coverage`
run-cov = "coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}"
cov-combine = "coverage combine"
cov-report = "coverage report"

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.hatch-static-analysis]
dependencies = ["ruff==0.4.3"]

[tool.hatch.envs.hatch-static-analysis.scripts]
# Fixes are executed with `hatch fmt`.
# Checks are executed with `hatch fmt --check`.

format-check = "ruff format --check --config pyproject.toml {args:.}"
format-fix = "ruff format --config pyproject.toml {args:.}"
lint-check = "ruff check --config pyproject.toml {args:.}"
lint-fix = "ruff check --config pyproject.toml --fix --exit-non-zero-on-fix --show-fixes {args:.}"

[tool.hatch.envs.docs]
features = ["docs"]

[tool.hatch.envs.docs.scripts]
build = [
  "make -C docs"
]
